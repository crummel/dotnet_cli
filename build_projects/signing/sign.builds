<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildProjectDirectory)\..\..\build_tools\Build.Common.props" />
  <Import Project="$(MSBuildProjectDirectory)\..\..\build_tools\Build.Common.targets" />
  <UsingTask AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" TaskName="ReadSigningRequired" />
  <!-- populates item group FilesToSign with the list of files to sign -->
  <Target Name="GetFilesToSignItems">
    <!-- read all of the marker files and populate the FilesToSign item group -->
    <ItemGroup>
      <SignMarkerFile Include="$(MSBuildProjectDirectory)\..\..\**\*.requires_signing" />
    </ItemGroup>
    <ReadSigningRequired MarkerFiles="@(SignMarkerFile)">
      <Output TaskParameter="SigningMetadata" ItemName="FilesToSign" />
    </ReadSigningRequired>
  </Target>
  <Target Name="Build"
          Condition="'$(SkipSigning)' != 'true' and '$(SignType)' != 'oss'"
          DependsOnTargets="GetFilesToSignItems">
          <Message Text="Signing files: @(SignMarkerFile)" />
    <!-- <CallTarget Targets="SignFiles" /> -->
    <!-- now that the files have been signed delete the marker files -->
    <!-- <Delete Files="@(SignMarkerFile)" /> -->
  </Target>
  
<!-- https://stackoverflow.com/questions/13548851/msbuild-usingtask-resolve-references -->
  <Target Name="BeforeBuild" BeforeTargets="GetFilesToSignItems">
    <HandleAssemblyResolve SearchPath="$(BuildToolsTaskDir)" />
  </Target>
  <UsingTask TaskName="HandleAssemblyResolve" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <SearchPath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Reflection" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
AppDomain.CurrentDomain.AssemblyResolve += (sender, e) => 
{ 
  var assemblySearchPath = Path.Combine(SearchPath, e.Name.Split(',')[0] + ".dll");
  Console.WriteLine("Searching " + assemblySearchPath);
  if (File.Exists(assemblySearchPath)) 
  {
    Console.WriteLine("Found");
    return Assembly.LoadFrom(assemblySearchPath);
  }
  else
  {
    Console.WriteLine("Not found");
  }
  return null;
};
]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
